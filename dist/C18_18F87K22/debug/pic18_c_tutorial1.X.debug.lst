

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Thu Apr 23 03:40:58 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    14                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    15                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    16                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    17                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    18  0000                     _ADCON0bits	set	4034
    19  0000                     _ADCON1bits	set	4033
    20  0000                     _ADCON2bits	set	4032
    21  0000                     _ADRESH	set	4036
    22  0000                     _ADRESL	set	4035
    23  0000                     _INTCONbits	set	4082
    24  0000                     _LATC	set	3979
    25  0000                     _LATCbits	set	3979
    26  0000                     _OSCCON	set	4051
    27  0000                     _OSCTUNE	set	3995
    28  0000                     _PIE1bits	set	3997
    29  0000                     _PIE2bits	set	4000
    30  0000                     _PIR1bits	set	3998
    31  0000                     _PIR2bits	set	4001
    32  0000                     _RCONbits	set	4048
    33  0000                     _T1CONbits	set	4045
    34  0000                     _T3CONbits	set	4017
    35  0000                     _TMR1H	set	4047
    36  0000                     _TMR1L	set	4046
    37  0000                     _TMR3H	set	4019
    38  0000                     _TMR3L	set	4018
    39  0000                     _TRISA	set	3986
    40  0000                     _TRISB	set	3987
    41  0000                     _TRISC	set	3988
    42  0000                     _TRISD	set	3989
    43                           
    44                           	psect	nvCOMRAM
    45  000049                     __pnvCOMRAM:
    46                           	opt stack 0
    47  000049                     _forward:
    48                           	opt stack 0
    49  000049                     	ds	2
    50  00004B                     _leftturnstep:
    51                           	opt stack 0
    52  00004B                     	ds	2
    53  00004D                     _lstep:
    54                           	opt stack 0
    55  00004D                     	ds	2
    56  00004F                     _rstep:
    57                           	opt stack 0
    58  00004F                     	ds	2
    59  000051                     _ustep:
    60                           	opt stack 0
    61  000051                     	ds	2
    62  000053                     _lmotorstephigh:
    63                           	opt stack 0
    64  000053                     	ds	1
    65  000054                     _lmotorsteplow:
    66                           	opt stack 0
    67  000054                     	ds	1
    68  000055                     _rmotorstephigh:
    69                           	opt stack 0
    70  000055                     	ds	1
    71  000056                     _rmotorsteplow:
    72                           	opt stack 0
    73  000056                     	ds	1
    74                           
    75                           ; #config settings
    76  0000                     
    77                           	psect	cinit
    78  0003FE                     __pcinit:
    79                           	opt stack 0
    80  0003FE                     start_initialization:
    81                           	opt stack 0
    82  0003FE                     __initialization:
    83                           	opt stack 0
    84                           
    85                           ; Clear objects allocated to COMRAM (36 bytes)
    86  0003FE  EE00  F001         	lfsr	0,__pbssCOMRAM
    87  000402  0E24               	movlw	36
    88  000404                     clear_0:
    89  000404  6AEE               	clrf	postinc0,c
    90  000406  06E8               	decf	wreg,f,c
    91  000408  E1FD               	bnz	clear_0
    92  00040A                     end_of_initialization:
    93                           	opt stack 0
    94  00040A                     __end_of__initialization:
    95                           	opt stack 0
    96  00040A  0100               	movlb	0
    97  00040C  EF5E  F001         	goto	_main	;jump to C main() function
    98                           postinc0	equ	0xFEE
    99                           wreg	equ	0xFE8
   100                           
   101                           	psect	bssCOMRAM
   102  000001                     __pbssCOMRAM:
   103                           	opt stack 0
   104  000001                     _adc:
   105                           	opt stack 0
   106  000001                     	ds	2
   107  000003                     _has_front_wall:
   108                           	opt stack 0
   109  000003                     	ds	2
   110  000005                     _has_left_wall:
   111                           	opt stack 0
   112  000005                     	ds	2
   113  000007                     _has_right_wall:
   114                           	opt stack 0
   115  000007                     	ds	2
   116  000009                     _left:
   117                           	opt stack 0
   118  000009                     	ds	2
   119  00000B                     _leftadc:
   120                           	opt stack 0
   121  00000B                     	ds	2
   122  00000D                     _lstepcount:
   123                           	opt stack 0
   124  00000D                     	ds	2
   125  00000F                     _lturn:
   126                           	opt stack 0
   127  00000F                     	ds	2
   128  000011                     _lturncount:
   129                           	opt stack 0
   130  000011                     	ds	2
   131  000013                     _middleadc:
   132                           	opt stack 0
   133  000013                     	ds	2
   134  000015                     _prev_adc:
   135                           	opt stack 0
   136  000015                     	ds	2
   137  000017                     _right:
   138                           	opt stack 0
   139  000017                     	ds	2
   140  000019                     _rightadc:
   141                           	opt stack 0
   142  000019                     	ds	2
   143  00001B                     _rightstep:
   144                           	opt stack 0
   145  00001B                     	ds	2
   146  00001D                     _rightturnstep:
   147                           	opt stack 0
   148  00001D                     	ds	2
   149  00001F                     _rstepcount:
   150                           	opt stack 0
   151  00001F                     	ds	2
   152  000021                     _step_count:
   153                           	opt stack 0
   154  000021                     	ds	2
   155  000023                     _uturn:
   156                           	opt stack 0
   157  000023                     	ds	2
   158                           postinc0	equ	0xFEE
   159                           wreg	equ	0xFE8
   160                           
   161                           	psect	cstackCOMRAM
   162  000025                     __pcstackCOMRAM:
   163                           	opt stack 0
   164  000025                     ??_low_isr:
   165  000025                     
   166                           ; 0 bytes @ 0x0
   167  000025                     	ds	17
   168  000036                     ??_high_isr:
   169                           
   170                           ; 0 bytes @ 0x11
   171  000036                     	ds	14
   172  000044                     ?_adc_convert:
   173                           	opt stack 0
   174                           
   175                           ; 2 bytes @ 0x1F
   176  000044                     	ds	2
   177  000046                     ??_adc_convert:
   178                           
   179                           ; 0 bytes @ 0x21
   180  000046                     	ds	2
   181  000048                     adc_convert@channel:
   182                           	opt stack 0
   183                           
   184                           ; 1 bytes @ 0x23
   185  000048                     	ds	1
   186  000049                     postinc0	equ	0xFEE
   187                           wreg	equ	0xFE8
   188                           
   189                           ; 0 bytes @ 0x24
   190 ;;
   191 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   192 ;;
   193 ;; *************** function _main *****************
   194 ;; Defined at:
   195 ;;		line 91 in file "main.c"
   196 ;; Parameters:    Size  Location     Type
   197 ;;		None
   198 ;; Auto vars:     Size  Location     Type
   199 ;;		None
   200 ;; Return value:  Size  Location     Type
   201 ;;		None               void
   202 ;; Registers used:
   203 ;;		wreg, status,2, status,0, cstack
   204 ;; Tracked objects:
   205 ;;		On entry : 0/0
   206 ;;		On exit  : 0/0
   207 ;;		Unchanged: 0/0
   208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   209 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   210 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   211 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   212 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   213 ;;Total ram usage:        0 bytes
   214 ;; Hardware stack levels required when called:    4
   215 ;; This function calls:
   216 ;;		_ConfigureOscillator
   217 ;;		_scan_sensors
   218 ;; This function is called by:
   219 ;;		Startup code after reset
   220 ;; This function uses a non-reentrant model
   221 ;;
   222                           
   223                           	psect	text0
   224  0002BC                     __ptext0:
   225                           	opt stack 0
   226  0002BC                     _main:
   227                           	opt stack 26
   228                           
   229                           ;main.c: 94: OSCCON = 0b01111100;
   230                           
   231                           ;incstack = 0
   232  0002BC  0E7C               	movlw	124
   233  0002BE  6ED3               	movwf	4051,c	;volatile
   234                           
   235                           ;main.c: 96: OSCTUNE = 0b01001111;
   236  0002C0  0E4F               	movlw	79
   237  0002C2  6E9B               	movwf	3995,c	;volatile
   238                           
   239                           ;main.c: 98: ConfigureOscillator();
   240  0002C4  EC08  F002         	call	_ConfigureOscillator	;wreg free
   241                           
   242                           ;main.c: 104: TRISA = 0b00000111;
   243  0002C8  0E07               	movlw	7
   244  0002CA  6E92               	movwf	3986,c	;volatile
   245                           
   246                           ;main.c: 105: TRISC = 0b00000000;
   247  0002CC  0E00               	movlw	0
   248  0002CE  6E94               	movwf	3988,c	;volatile
   249                           
   250                           ;main.c: 106: TRISB = 0b00000000;
   251  0002D0  0E00               	movlw	0
   252  0002D2  6E93               	movwf	3987,c	;volatile
   253                           
   254                           ;main.c: 107: TRISD = 0b00000000;
   255  0002D4  0E00               	movlw	0
   256  0002D6  6E95               	movwf	3989,c	;volatile
   257                           
   258                           ;main.c: 112: LATC = 0b00000000;
   259  0002D8  0E00               	movlw	0
   260  0002DA  6E8B               	movwf	3979,c	;volatile
   261                           
   262                           ;main.c: 115: ADCON0bits.CHS = 0b0000;
   263  0002DC  94C2               	bcf	4034,2,c	;volatile
   264  0002DE  96C2               	bcf	4034,3,c	;volatile
   265  0002E0  98C2               	bcf	4034,4,c	;volatile
   266  0002E2  9AC2               	bcf	4034,5,c	;volatile
   267                           
   268                           ;main.c: 116: ADCON0bits.GO = 0;
   269  0002E4  92C2               	bcf	4034,1,c	;volatile
   270                           
   271                           ;main.c: 117: ADCON1bits.VCFG = 0b00;
   272  0002E6  0ECF               	movlw	-49
   273  0002E8  16C1               	andwf	4033,f,c	;volatile
   274                           
   275                           ;main.c: 118: ADCON1bits.PCFG = 0b1100;
   276  0002EA  50C1               	movf	4033,w,c	;volatile
   277  0002EC  0BF0               	andlw	-16
   278  0002EE  090C               	iorlw	12
   279  0002F0  6EC1               	movwf	4033,c	;volatile
   280                           
   281                           ;main.c: 119: ADCON2bits.ADFM = 1;
   282  0002F2  8EC0               	bsf	4032,7,c	;volatile
   283                           
   284                           ;main.c: 120: ADCON2bits.ACQT = 0b010;
   285  0002F4  50C0               	movf	4032,w,c	;volatile
   286  0002F6  0BC7               	andlw	-57
   287  0002F8  0910               	iorlw	16
   288  0002FA  6EC0               	movwf	4032,c	;volatile
   289                           
   290                           ;main.c: 121: ADCON2bits.ADCS = 0b010;
   291  0002FC  50C0               	movf	4032,w,c	;volatile
   292  0002FE  0BF8               	andlw	-8
   293  000300  0902               	iorlw	2
   294  000302  6EC0               	movwf	4032,c	;volatile
   295                           
   296                           ;main.c: 122: ADCON0bits.ADON = 1;
   297  000304  80C2               	bsf	4034,0,c	;volatile
   298                           
   299                           ;main.c: 125: RCONbits.IPEN = 1;
   300  000306  8ED0               	bsf	4048,7,c	;volatile
   301                           
   302                           ;main.c: 126: INTCONbits.GIE = 1;
   303  000308  8EF2               	bsf	intcon,7,c	;volatile
   304                           
   305                           ;main.c: 127: INTCONbits.PEIE = 1;
   306  00030A  8CF2               	bsf	intcon,6,c	;volatile
   307                           
   308                           ;main.c: 128: INTCONbits.INT0IE = 0;
   309  00030C  98F2               	bcf	intcon,4,c	;volatile
   310                           
   311                           ;main.c: 129: INTCONbits.RBIE = 0;
   312  00030E  96F2               	bcf	intcon,3,c	;volatile
   313                           
   314                           ;main.c: 133: T3CONbits.TMR3ON = 0;
   315  000310  90B1               	bcf	4017,0,c	;volatile
   316                           
   317                           ;main.c: 134: T3CONbits.RD16 = 1;
   318  000312  8EB1               	bsf	4017,7,c	;volatile
   319                           
   320                           ;main.c: 135: T3CONbits.T3CKPS1 = 0;
   321  000314  9AB1               	bcf	4017,5,c	;volatile
   322                           
   323                           ;main.c: 136: T3CONbits.T3CKPS0 = 0;
   324  000316  98B1               	bcf	4017,4,c	;volatile
   325                           
   326                           ;main.c: 137: T3CONbits.TMR3CS = 0;
   327  000318  92B1               	bcf	4017,1,c	;volatile
   328                           
   329                           ;main.c: 138: PIR2bits.TMR3IF = 0;
   330  00031A  92A1               	bcf	4001,1,c	;volatile
   331                           
   332                           ;main.c: 139: PIE2bits.TMR3IE = 1;
   333  00031C  82A0               	bsf	4000,1,c	;volatile
   334                           
   335                           ;main.c: 142: T1CONbits.TMR1ON = 0;
   336  00031E  90CD               	bcf	4045,0,c	;volatile
   337                           
   338                           ;main.c: 143: T1CONbits.RD16 = 1;
   339  000320  8ECD               	bsf	4045,7,c	;volatile
   340                           
   341                           ;main.c: 144: T1CONbits.T1CKPS1 = 0;
   342  000322  9ACD               	bcf	4045,5,c	;volatile
   343                           
   344                           ;main.c: 145: T1CONbits.T1CKPS0 = 0;
   345  000324  98CD               	bcf	4045,4,c	;volatile
   346                           
   347                           ;main.c: 146: T1CONbits.TMR1CS = 0;
   348  000326  92CD               	bcf	4045,1,c	;volatile
   349                           
   350                           ;main.c: 147: PIR1bits.TMR1IF = 0;
   351  000328  909E               	bcf	3998,0,c	;volatile
   352                           
   353                           ;main.c: 148: PIE1bits.TMR1IE = 1;
   354  00032A  809D               	bsf	3997,0,c	;volatile
   355                           
   356                           ;main.c: 150: lstep = 1;
   357  00032C  0E00               	movlw	0
   358  00032E  6E4E               	movwf	_lstep+1,c
   359  000330  0E01               	movlw	1
   360  000332  6E4D               	movwf	_lstep,c
   361                           
   362                           ;main.c: 151: rstep = 1;
   363  000334  0E00               	movlw	0
   364  000336  6E50               	movwf	_rstep+1,c
   365  000338  0E01               	movlw	1
   366  00033A  6E4F               	movwf	_rstep,c
   367                           
   368                           ;main.c: 152: leftturnstep = 1;
   369  00033C  0E00               	movlw	0
   370  00033E  6E4C               	movwf	_leftturnstep+1,c
   371  000340  0E01               	movlw	1
   372  000342  6E4B               	movwf	_leftturnstep,c
   373                           
   374                           ;main.c: 153: ustep = 1;
   375  000344  0E00               	movlw	0
   376  000346  6E52               	movwf	_ustep+1,c
   377  000348  0E01               	movlw	1
   378  00034A  6E51               	movwf	_ustep,c
   379                           
   380                           ;main.c: 154: forward = 1;
   381  00034C  0E00               	movlw	0
   382  00034E  6E4A               	movwf	_forward+1,c
   383  000350  0E01               	movlw	1
   384  000352  6E49               	movwf	_forward,c
   385                           
   386                           ;main.c: 155: lturn = 0;
   387  000354  0E00               	movlw	0
   388  000356  6E10               	movwf	_lturn+1,c
   389  000358  0E00               	movlw	0
   390  00035A  6E0F               	movwf	_lturn,c
   391                           
   392                           ;main.c: 156: rstepcount = 0;
   393  00035C  0E00               	movlw	0
   394  00035E  6E20               	movwf	_rstepcount+1,c
   395  000360  0E00               	movlw	0
   396  000362  6E1F               	movwf	_rstepcount,c
   397                           
   398                           ;main.c: 157: lstepcount = 0;
   399  000364  0E00               	movlw	0
   400  000366  6E0E               	movwf	_lstepcount+1,c
   401  000368  0E00               	movlw	0
   402  00036A  6E0D               	movwf	_lstepcount,c
   403                           
   404                           ;main.c: 158: lturncount = 0;
   405  00036C  0E00               	movlw	0
   406  00036E  6E12               	movwf	_lturncount+1,c
   407  000370  0E00               	movlw	0
   408  000372  6E11               	movwf	_lturncount,c
   409                           
   410                           ;main.c: 160: T1CONbits.TMR1ON = 1;
   411  000374  80CD               	bsf	4045,0,c	;volatile
   412                           
   413                           ;main.c: 161: T3CONbits.TMR3ON = 1;
   414  000376  80B1               	bsf	4017,0,c	;volatile
   415                           
   416                           ;main.c: 163: lmotorstephigh = 0b00111111;
   417  000378  0E3F               	movlw	63
   418  00037A  6E53               	movwf	_lmotorstephigh,c
   419                           
   420                           ;main.c: 164: lmotorsteplow = 0b11110000;
   421  00037C  0EF0               	movlw	240
   422  00037E  6E54               	movwf	_lmotorsteplow,c
   423                           
   424                           ;main.c: 166: rmotorstephigh = 0b00111111;
   425  000380  0E3F               	movlw	63
   426  000382  6E55               	movwf	_rmotorstephigh,c
   427                           
   428                           ;main.c: 167: rmotorsteplow = 0b11111111;
   429  000384  6856               	setf	_rmotorsteplow,c
   430  000386                     l1052:
   431                           
   432                           ;main.c: 171: {
   433                           ;main.c: 172: scan_sensors();
   434  000386  ECE3  F001         	call	_scan_sensors	;wreg free
   435  00038A  D7FD               	goto	l1052
   436  00038C                     __end_of_main:
   437                           	opt stack 0
   438                           intcon	equ	0xFF2
   439                           postinc0	equ	0xFEE
   440                           wreg	equ	0xFE8
   441                           
   442 ;; *************** function _scan_sensors *****************
   443 ;; Defined at:
   444 ;;		line 82 in file "main.c"
   445 ;; Parameters:    Size  Location     Type
   446 ;;		None
   447 ;; Auto vars:     Size  Location     Type
   448 ;;		None
   449 ;; Return value:  Size  Location     Type
   450 ;;		None               void
   451 ;; Registers used:
   452 ;;		wreg, status,2, status,0, cstack
   453 ;; Tracked objects:
   454 ;;		On entry : 0/0
   455 ;;		On exit  : 0/0
   456 ;;		Unchanged: 0/0
   457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   458 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   459 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   460 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   461 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   462 ;;Total ram usage:        0 bytes
   463 ;; Hardware stack levels used:    1
   464 ;; Hardware stack levels required when called:    3
   465 ;; This function calls:
   466 ;;		_adc_convert
   467 ;; This function is called by:
   468 ;;		_main
   469 ;; This function uses a non-reentrant model
   470 ;;
   471                           
   472                           	psect	text1
   473  0003C6                     __ptext1:
   474                           	opt stack 0
   475  0003C6                     _scan_sensors:
   476                           	opt stack 26
   477  0003C6                     l213:
   478  0003C6  B2C2               	btfsc	4034,1,c	;volatile
   479  0003C8  D7FE               	goto	l213
   480                           
   481                           ;main.c: 84: middleadc = adc_convert(0);
   482  0003CA  0E00               	movlw	0
   483  0003CC  ECC6  F001         	call	_adc_convert
   484  0003D0  C044  F013         	movff	?_adc_convert,_middleadc
   485  0003D4  C045  F014         	movff	?_adc_convert+1,_middleadc+1
   486  0003D8                     l216:
   487  0003D8  B2C2               	btfsc	4034,1,c	;volatile
   488  0003DA  D7FE               	goto	l216
   489                           
   490                           ;main.c: 86: leftadc = adc_convert(1);
   491  0003DC  0E01               	movlw	1
   492  0003DE  ECC6  F001         	call	_adc_convert
   493  0003E2  C044  F00B         	movff	?_adc_convert,_leftadc
   494  0003E6  C045  F00C         	movff	?_adc_convert+1,_leftadc+1
   495  0003EA                     l219:
   496  0003EA  B2C2               	btfsc	4034,1,c	;volatile
   497  0003EC  D7FE               	goto	l219
   498                           
   499                           ;main.c: 88: rightadc = adc_convert(2);
   500  0003EE  0E02               	movlw	2
   501  0003F0  ECC6  F001         	call	_adc_convert
   502  0003F4  C044  F019         	movff	?_adc_convert,_rightadc
   503  0003F8  C045  F01A         	movff	?_adc_convert+1,_rightadc+1
   504  0003FC  0012               	return	
   505  0003FE                     __end_of_scan_sensors:
   506                           	opt stack 0
   507                           intcon	equ	0xFF2
   508                           postinc0	equ	0xFEE
   509                           wreg	equ	0xFE8
   510                           
   511 ;; *************** function _adc_convert *****************
   512 ;; Defined at:
   513 ;;		line 68 in file "main.c"
   514 ;; Parameters:    Size  Location     Type
   515 ;;  channel         1    wreg     unsigned char 
   516 ;; Auto vars:     Size  Location     Type
   517 ;;  channel         1   35[COMRAM] unsigned char 
   518 ;; Return value:  Size  Location     Type
   519 ;;                  2   31[COMRAM] unsigned int 
   520 ;; Registers used:
   521 ;;		wreg, status,2, status,0
   522 ;; Tracked objects:
   523 ;;		On entry : 0/0
   524 ;;		On exit  : 0/0
   525 ;;		Unchanged: 0/0
   526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   527 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   528 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   529 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   530 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   531 ;;Total ram usage:        5 bytes
   532 ;; Hardware stack levels used:    1
   533 ;; Hardware stack levels required when called:    2
   534 ;; This function calls:
   535 ;;		Nothing
   536 ;; This function is called by:
   537 ;;		_scan_sensors
   538 ;; This function uses a non-reentrant model
   539 ;;
   540                           
   541                           	psect	text2
   542  00038C                     __ptext2:
   543                           	opt stack 0
   544  00038C                     _adc_convert:
   545                           	opt stack 26
   546                           
   547                           ;incstack = 0
   548                           ;adc_convert@channel stored from wreg
   549  00038C  6E48               	movwf	adc_convert@channel,c
   550  00038E  C001  F015         	movff	_adc,_prev_adc
   551  000392  C002  F016         	movff	_adc+1,_prev_adc+1
   552                           
   553                           ;main.c: 70: ADCON0bits.CHS = channel;
   554  000396  C048  F046         	movff	adc_convert@channel,??_adc_convert
   555  00039A  4646               	rlncf	??_adc_convert,f,c
   556  00039C  4646               	rlncf	??_adc_convert,f,c
   557  00039E  50C2               	movf	4034,w,c	;volatile
   558  0003A0  1846               	xorwf	??_adc_convert,w,c
   559  0003A2  0BC3               	andlw	-61
   560  0003A4  1846               	xorwf	??_adc_convert,w,c
   561  0003A6  6EC2               	movwf	4034,c	;volatile
   562                           
   563                           ;main.c: 71: ADCON0bits.GO = 0b1;
   564  0003A8  82C2               	bsf	4034,1,c	;volatile
   565  0003AA                     l201:
   566  0003AA  B2C2               	btfsc	4034,1,c	;volatile
   567  0003AC  D7FE               	goto	l201
   568                           
   569                           ;main.c: 73: return (ADRESH<<8)|ADRESL;
   570  0003AE  50C3               	movf	4035,w,c	;volatile
   571  0003B0  CFC4 F046          	movff	4036,??_adc_convert	;volatile
   572  0003B4  6A47               	clrf	(??_adc_convert+1)& (0+255),c
   573  0003B6  C046  F047         	movff	??_adc_convert,??_adc_convert+1
   574  0003BA  6A46               	clrf	??_adc_convert,c
   575  0003BC  1046               	iorwf	??_adc_convert,w,c
   576  0003BE  6E44               	movwf	?_adc_convert,c
   577  0003C0  5047               	movf	??_adc_convert+1,w,c
   578  0003C2  6E45               	movwf	?_adc_convert+1,c
   579  0003C4  0012               	return	
   580  0003C6                     __end_of_adc_convert:
   581                           	opt stack 0
   582                           intcon	equ	0xFF2
   583                           postinc0	equ	0xFEE
   584                           wreg	equ	0xFE8
   585                           
   586 ;; *************** function _ConfigureOscillator *****************
   587 ;; Defined at:
   588 ;;		line 24 in file "system.c"
   589 ;; Parameters:    Size  Location     Type
   590 ;;		None
   591 ;; Auto vars:     Size  Location     Type
   592 ;;		None
   593 ;; Return value:  Size  Location     Type
   594 ;;		None               void
   595 ;; Registers used:
   596 ;;		None
   597 ;; Tracked objects:
   598 ;;		On entry : 0/0
   599 ;;		On exit  : 0/0
   600 ;;		Unchanged: 0/0
   601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   602 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   603 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   604 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   605 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   606 ;;Total ram usage:        0 bytes
   607 ;; Hardware stack levels used:    1
   608 ;; Hardware stack levels required when called:    2
   609 ;; This function calls:
   610 ;;		Nothing
   611 ;; This function is called by:
   612 ;;		_main
   613 ;; This function uses a non-reentrant model
   614 ;;
   615                           
   616                           	psect	text3
   617  000410                     __ptext3:
   618                           	opt stack 0
   619  000410                     _ConfigureOscillator:
   620                           	opt stack 27
   621                           
   622                           ;incstack = 0
   623  000410  0012               	return	
   624  000412                     __end_of_ConfigureOscillator:
   625                           	opt stack 0
   626                           intcon	equ	0xFF2
   627                           postinc0	equ	0xFEE
   628                           wreg	equ	0xFE8
   629                           
   630 ;; *************** function _low_isr *****************
   631 ;; Defined at:
   632 ;;		line 212 in file "interrupts.c"
   633 ;; Parameters:    Size  Location     Type
   634 ;;		None
   635 ;; Auto vars:     Size  Location     Type
   636 ;;		None
   637 ;; Return value:  Size  Location     Type
   638 ;;		None               void
   639 ;; Registers used:
   640 ;;		None
   641 ;; Tracked objects:
   642 ;;		On entry : 0/0
   643 ;;		On exit  : 0/0
   644 ;;		Unchanged: 0/0
   645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   646 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   647 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   648 ;;      Temps:         17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   649 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   650 ;;Total ram usage:       17 bytes
   651 ;; Hardware stack levels used:    1
   652 ;; Hardware stack levels required when called:    1
   653 ;; This function calls:
   654 ;;		Nothing
   655 ;; This function is called by:
   656 ;;		Interrupt level 1
   657 ;; This function uses a non-reentrant model
   658 ;;
   659                           
   660                           	psect	intcodelo
   661  000018                     __pintcodelo:
   662                           	opt stack 0
   663  000018                     _low_isr:
   664                           	opt stack 26
   665                           
   666                           ;incstack = 0
   667  000018  CFD8 F025          	movff	status,??_low_isr
   668  00001C  CFE8 F026          	movff	wreg,??_low_isr+1
   669  000020  CFE0 F027          	movff	bsr,??_low_isr+2
   670  000024  CFFA F028          	movff	pclath,??_low_isr+3
   671  000028  CFFB F029          	movff	pclatu,??_low_isr+4
   672  00002C  CFE9 F02A          	movff	fsr0l,??_low_isr+5
   673  000030  CFEA F02B          	movff	fsr0h,??_low_isr+6
   674  000034  CFE1 F02C          	movff	fsr1l,??_low_isr+7
   675  000038  CFE2 F02D          	movff	fsr1h,??_low_isr+8
   676  00003C  CFD9 F02E          	movff	fsr2l,??_low_isr+9
   677  000040  CFDA F02F          	movff	fsr2h,??_low_isr+10
   678  000044  CFF3 F030          	movff	prodl,??_low_isr+11
   679  000048  CFF4 F031          	movff	prodh,??_low_isr+12
   680  00004C  CFF6 F032          	movff	tblptrl,??_low_isr+13
   681  000050  CFF7 F033          	movff	tblptrh,??_low_isr+14
   682  000054  CFF8 F034          	movff	tblptru,??_low_isr+15
   683  000058  CFF5 F035          	movff	tablat,??_low_isr+16
   684  00005C  C035  FFF5         	movff	??_low_isr+16,tablat
   685  000060  C034  FFF8         	movff	??_low_isr+15,tblptru
   686  000064  C033  FFF7         	movff	??_low_isr+14,tblptrh
   687  000068  C032  FFF6         	movff	??_low_isr+13,tblptrl
   688  00006C  C031  FFF4         	movff	??_low_isr+12,prodh
   689  000070  C030  FFF3         	movff	??_low_isr+11,prodl
   690  000074  C02F  FFDA         	movff	??_low_isr+10,fsr2h
   691  000078  C02E  FFD9         	movff	??_low_isr+9,fsr2l
   692  00007C  C02D  FFE2         	movff	??_low_isr+8,fsr1h
   693  000080  C02C  FFE1         	movff	??_low_isr+7,fsr1l
   694  000084  C02B  FFEA         	movff	??_low_isr+6,fsr0h
   695  000088  C02A  FFE9         	movff	??_low_isr+5,fsr0l
   696  00008C  C029  FFFB         	movff	??_low_isr+4,pclatu
   697  000090  C028  FFFA         	movff	??_low_isr+3,pclath
   698  000094  C027  FFE0         	movff	??_low_isr+2,bsr
   699  000098  C026  FFE8         	movff	??_low_isr+1,wreg
   700  00009C  C025  FFD8         	movff	??_low_isr,status
   701  0000A0  0010               	retfie	
   702  0000A2                     __end_of_low_isr:
   703                           	opt stack 0
   704                           pclatu	equ	0xFFB
   705                           pclath	equ	0xFFA
   706                           tblptru	equ	0xFF8
   707                           tblptrh	equ	0xFF7
   708                           tblptrl	equ	0xFF6
   709                           tablat	equ	0xFF5
   710                           prodh	equ	0xFF4
   711                           prodl	equ	0xFF3
   712                           intcon	equ	0xFF2
   713                           postinc0	equ	0xFEE
   714                           fsr0h	equ	0xFEA
   715                           fsr0l	equ	0xFE9
   716                           wreg	equ	0xFE8
   717                           fsr1h	equ	0xFE2
   718                           fsr1l	equ	0xFE1
   719                           bsr	equ	0xFE0
   720                           fsr2h	equ	0xFDA
   721                           fsr2l	equ	0xFD9
   722                           status	equ	0xFD8
   723                           
   724 ;; *************** function _high_isr *****************
   725 ;; Defined at:
   726 ;;		line 66 in file "interrupts.c"
   727 ;; Parameters:    Size  Location     Type
   728 ;;		None
   729 ;; Auto vars:     Size  Location     Type
   730 ;;		None
   731 ;; Return value:  Size  Location     Type
   732 ;;		None               void
   733 ;; Registers used:
   734 ;;		wreg, status,2, status,0, prodl
   735 ;; Tracked objects:
   736 ;;		On entry : 0/0
   737 ;;		On exit  : 0/0
   738 ;;		Unchanged: 0/0
   739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   740 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   741 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   742 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   743 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   744 ;;Total ram usage:       14 bytes
   745 ;; Hardware stack levels used:    1
   746 ;; This function calls:
   747 ;;		Nothing
   748 ;; This function is called by:
   749 ;;		Interrupt level 2
   750 ;; This function uses a non-reentrant model
   751 ;;
   752                           
   753                           	psect	intcode
   754  000008                     __pintcode:
   755                           	opt stack 0
   756  000008                     _high_isr:
   757                           	opt stack 26
   758                           
   759                           ;incstack = 0
   760  000008  CFFA F036          	movff	pclath,??_high_isr
   761  00000C  CFFB F037          	movff	pclatu,??_high_isr+1
   762  000010  CFE9 F038          	movff	fsr0l,??_high_isr+2
   763  000014  ED53  F000         	call	int_func,f	;refresh shadow registers
   764                           pclatu	equ	0xFFB
   765                           pclath	equ	0xFFA
   766                           tblptru	equ	0xFF8
   767                           tblptrh	equ	0xFF7
   768                           tblptrl	equ	0xFF6
   769                           tablat	equ	0xFF5
   770                           prodh	equ	0xFF4
   771                           prodl	equ	0xFF3
   772                           intcon	equ	0xFF2
   773                           postinc0	equ	0xFEE
   774                           fsr0h	equ	0xFEA
   775                           fsr0l	equ	0xFE9
   776                           wreg	equ	0xFE8
   777                           fsr1h	equ	0xFE2
   778                           fsr1l	equ	0xFE1
   779                           bsr	equ	0xFE0
   780                           fsr2h	equ	0xFDA
   781                           fsr2l	equ	0xFD9
   782                           status	equ	0xFD8
   783                           
   784                           	psect	intcode_body
   785  0000A6                     __pintcode_body:
   786                           	opt stack 26
   787  0000A6                     int_func:
   788                           	opt stack 26
   789  0000A6  0006               	pop		; remove dummy address from shadow register refresh
   790  0000A8  CFEA F039          	movff	fsr0h,??_high_isr+3
   791  0000AC  CFE1 F03A          	movff	fsr1l,??_high_isr+4
   792  0000B0  CFE2 F03B          	movff	fsr1h,??_high_isr+5
   793  0000B4  CFD9 F03C          	movff	fsr2l,??_high_isr+6
   794  0000B8  CFDA F03D          	movff	fsr2h,??_high_isr+7
   795  0000BC  CFF3 F03E          	movff	prodl,??_high_isr+8
   796  0000C0  CFF4 F03F          	movff	prodh,??_high_isr+9
   797  0000C4  CFF6 F040          	movff	tblptrl,??_high_isr+10
   798  0000C8  CFF7 F041          	movff	tblptrh,??_high_isr+11
   799  0000CC  CFF8 F042          	movff	tblptru,??_high_isr+12
   800  0000D0  CFF5 F043          	movff	tablat,??_high_isr+13
   801                           
   802                           ;interrupts.c: 69: if (PIR2bits.TMR3IF && forward && lstepcount < 1000)
   803  0000D4  A2A1               	btfss	4001,1,c	;volatile
   804  0000D6  D042               	goto	i2l868
   805  0000D8  504A               	movf	_forward+1,w,c
   806  0000DA  1049               	iorwf	_forward,w,c
   807  0000DC  B4D8               	btfsc	status,2,c
   808  0000DE  D03E               	goto	i2l868
   809  0000E0  500E               	movf	_lstepcount+1,w,c
   810  0000E2  0A80               	xorlw	128
   811  0000E4  6EF3               	movwf	prodl,c
   812  0000E6  0E83               	movlw	131
   813  0000E8  5CF3               	subwf	prodl,w,c
   814  0000EA  0EE8               	movlw	232
   815  0000EC  B4D8               	btfsc	status,2,c
   816  0000EE  5C0D               	subwf	_lstepcount,w,c
   817  0000F0  B0D8               	btfsc	status,0,c
   818  0000F2  D034               	goto	i2l868
   819                           
   820                           ;interrupts.c: 70: {
   821                           ;interrupts.c: 73: if (lstep == 1)
   822  0000F4  044D               	decf	_lstep,w,c
   823  0000F6  104E               	iorwf	_lstep+1,w,c
   824  0000F8  A4D8               	btfss	status,2,c
   825  0000FA  D005               	goto	i2l840
   826                           
   827                           ;interrupts.c: 74: { LATCbits.LATC3 = 0;
   828  0000FC  968B               	bcf	3979,3,c	;volatile
   829                           
   830                           ;interrupts.c: 75: LATCbits.LATC1 = 1;
   831  0000FE  828B               	bsf	3979,1,c	;volatile
   832                           
   833                           ;interrupts.c: 76: LATCbits.LATC0 = 0;
   834  000100  908B               	bcf	3979,0,c	;volatile
   835                           
   836                           ;interrupts.c: 77: LATCbits.LATC2 = 0;
   837  000102  948B               	bcf	3979,2,c	;volatile
   838  000104  D013               	goto	L2
   839  000106                     i2l840:
   840                           
   841                           ;interrupts.c: 80: else if (lstep == 2)
   842  000106  504D               	movf	_lstep,w,c
   843  000108  0A02               	xorlw	2
   844  00010A  104E               	iorwf	_lstep+1,w,c
   845  00010C  A4D8               	btfss	status,2,c
   846  00010E  D005               	goto	i2l846
   847                           
   848                           ;interrupts.c: 81: { LATCbits.LATC3 = 0;
   849  000110  968B               	bcf	3979,3,c	;volatile
   850                           
   851                           ;interrupts.c: 82: LATCbits.LATC2 = 1;
   852  000112  848B               	bsf	3979,2,c	;volatile
   853                           
   854                           ;interrupts.c: 83: LATCbits.LATC0 = 0;
   855  000114  908B               	bcf	3979,0,c	;volatile
   856                           
   857                           ;interrupts.c: 84: LATCbits.LATC1 = 0;
   858  000116  928B               	bcf	3979,1,c	;volatile
   859  000118  D009               	goto	L2
   860  00011A                     i2l846:
   861                           
   862                           ;interrupts.c: 87: else if (lstep == 3)
   863  00011A  504D               	movf	_lstep,w,c
   864  00011C  0A03               	xorlw	3
   865  00011E  104E               	iorwf	_lstep+1,w,c
   866  000120  A4D8               	btfss	status,2,c
   867  000122  D007               	goto	i2l852
   868                           
   869                           ;interrupts.c: 88: { LATCbits.LATC3 = 1;
   870  000124  868B               	bsf	3979,3,c	;volatile
   871                           
   872                           ;interrupts.c: 89: LATCbits.LATC2 = 0;
   873  000126  948B               	bcf	3979,2,c	;volatile
   874                           
   875                           ;interrupts.c: 90: LATCbits.LATC1 = 0;
   876  000128  928B               	bcf	3979,1,c	;volatile
   877                           
   878                           ;interrupts.c: 91: LATCbits.LATC0 = 0;
   879  00012A  908B               	bcf	3979,0,c	;volatile
   880  00012C                     L2:
   881                           
   882                           ;interrupts.c: 92: lstep++;
   883  00012C  4A4D               	infsnz	_lstep,f,c
   884  00012E  2A4E               	incf	_lstep+1,f,c
   885                           
   886                           ;interrupts.c: 93: }
   887  000130  D00F               	goto	i2l860
   888  000132                     i2l852:
   889                           
   890                           ;interrupts.c: 94: else if (lstep == 4)
   891  000132  504D               	movf	_lstep,w,c
   892  000134  0A04               	xorlw	4
   893  000136  104E               	iorwf	_lstep+1,w,c
   894  000138  A4D8               	btfss	status,2,c
   895  00013A  D00A               	goto	i2l860
   896                           
   897                           ;interrupts.c: 95: { LATCbits.LATC2 = 0;
   898  00013C  948B               	bcf	3979,2,c	;volatile
   899                           
   900                           ;interrupts.c: 96: LATCbits.LATC1 = 0;
   901  00013E  928B               	bcf	3979,1,c	;volatile
   902                           
   903                           ;interrupts.c: 97: LATCbits.LATC0 = 1;
   904  000140  808B               	bsf	3979,0,c	;volatile
   905                           
   906                           ;interrupts.c: 98: LATCbits.LATC3 = 0;
   907  000142  968B               	bcf	3979,3,c	;volatile
   908                           
   909                           ;interrupts.c: 99: lstep = 1;
   910  000144  0E00               	movlw	0
   911  000146  6E4E               	movwf	_lstep+1,c
   912  000148  0E01               	movlw	1
   913  00014A  6E4D               	movwf	_lstep,c
   914                           
   915                           ;interrupts.c: 100: lstepcount++;
   916  00014C  4A0D               	infsnz	_lstepcount,f,c
   917  00014E  2A0E               	incf	_lstepcount+1,f,c
   918  000150                     i2l860:
   919                           
   920                           ;interrupts.c: 101: }
   921                           ;interrupts.c: 104: PIR2bits.TMR3IF = 0;
   922  000150  92A1               	bcf	4001,1,c	;volatile
   923                           
   924                           ;interrupts.c: 105: T3CONbits.TMR3ON = 1;
   925  000152  80B1               	bsf	4017,0,c	;volatile
   926                           
   927                           ;interrupts.c: 107: TMR3H = lmotorstephigh;
   928  000154  C053  FFB3         	movff	_lmotorstephigh,4019	;volatile
   929                           
   930                           ;interrupts.c: 108: TMR3L = lmotorsteplow;
   931  000158  C054  FFB2         	movff	_lmotorsteplow,4018	;volatile
   932  00015C                     i2l868:
   933                           
   934                           ;interrupts.c: 109: }
   935                           ;interrupts.c: 112: if (PIR1bits.TMR1IF && forward && rstepcount < 1000)
   936  00015C  A09E               	btfss	3998,0,c	;volatile
   937  00015E  D042               	goto	i2l908
   938  000160  504A               	movf	_forward+1,w,c
   939  000162  1049               	iorwf	_forward,w,c
   940  000164  B4D8               	btfsc	status,2,c
   941  000166  D03E               	goto	i2l908
   942  000168  5020               	movf	_rstepcount+1,w,c
   943  00016A  0A80               	xorlw	128
   944  00016C  6EF3               	movwf	prodl,c
   945  00016E  0E83               	movlw	131
   946  000170  5CF3               	subwf	prodl,w,c
   947  000172  0EE8               	movlw	232
   948  000174  B4D8               	btfsc	status,2,c
   949  000176  5C1F               	subwf	_rstepcount,w,c
   950  000178  B0D8               	btfsc	status,0,c
   951  00017A  D034               	goto	i2l908
   952                           
   953                           ;interrupts.c: 113: {
   954                           ;interrupts.c: 117: if (rstep == 1)
   955  00017C  044F               	decf	_rstep,w,c
   956  00017E  1050               	iorwf	_rstep+1,w,c
   957  000180  A4D8               	btfss	status,2,c
   958  000182  D005               	goto	i2l880
   959                           
   960                           ;interrupts.c: 118: { LATCbits.LATC6 = 0;
   961  000184  9C8B               	bcf	3979,6,c	;volatile
   962                           
   963                           ;interrupts.c: 119: LATCbits.LATC7 = 0;
   964  000186  9E8B               	bcf	3979,7,c	;volatile
   965                           
   966                           ;interrupts.c: 120: LATCbits.LATC4 = 1;
   967  000188  888B               	bsf	3979,4,c	;volatile
   968                           
   969                           ;interrupts.c: 121: LATCbits.LATC5 = 0;
   970  00018A  9A8B               	bcf	3979,5,c	;volatile
   971  00018C  D013               	goto	L4
   972  00018E                     i2l880:
   973                           
   974                           ;interrupts.c: 124: else if (rstep == 2)
   975  00018E  504F               	movf	_rstep,w,c
   976  000190  0A02               	xorlw	2
   977  000192  1050               	iorwf	_rstep+1,w,c
   978  000194  A4D8               	btfss	status,2,c
   979  000196  D005               	goto	i2l886
   980                           
   981                           ;interrupts.c: 125: { LATCbits.LATC4 = 0;
   982  000198  988B               	bcf	3979,4,c	;volatile
   983                           
   984                           ;interrupts.c: 126: LATCbits.LATC5 = 0;
   985  00019A  9A8B               	bcf	3979,5,c	;volatile
   986                           
   987                           ;interrupts.c: 127: LATCbits.LATC7 = 1;
   988  00019C  8E8B               	bsf	3979,7,c	;volatile
   989                           
   990                           ;interrupts.c: 128: LATCbits.LATC6 = 0;
   991  00019E  9C8B               	bcf	3979,6,c	;volatile
   992  0001A0  D009               	goto	L4
   993  0001A2                     i2l886:
   994                           
   995                           ;interrupts.c: 131: else if (rstep == 3)
   996  0001A2  504F               	movf	_rstep,w,c
   997  0001A4  0A03               	xorlw	3
   998  0001A6  1050               	iorwf	_rstep+1,w,c
   999  0001A8  A4D8               	btfss	status,2,c
  1000  0001AA  D007               	goto	i2l892
  1001                           
  1002                           ;interrupts.c: 132: { LATCbits.LATC4 = 0;
  1003  0001AC  988B               	bcf	3979,4,c	;volatile
  1004                           
  1005                           ;interrupts.c: 133: LATCbits.LATC5 = 0;
  1006  0001AE  9A8B               	bcf	3979,5,c	;volatile
  1007                           
  1008                           ;interrupts.c: 134: LATCbits.LATC6 = 1;
  1009  0001B0  8C8B               	bsf	3979,6,c	;volatile
  1010                           
  1011                           ;interrupts.c: 135: LATCbits.LATC7 = 0;
  1012  0001B2  9E8B               	bcf	3979,7,c	;volatile
  1013  0001B4                     L4:
  1014                           
  1015                           ;interrupts.c: 136: rstep++;
  1016  0001B4  4A4F               	infsnz	_rstep,f,c
  1017  0001B6  2A50               	incf	_rstep+1,f,c
  1018                           
  1019                           ;interrupts.c: 137: }
  1020  0001B8  D00F               	goto	i2l900
  1021  0001BA                     i2l892:
  1022                           
  1023                           ;interrupts.c: 138: else if (rstep == 4)
  1024  0001BA  504F               	movf	_rstep,w,c
  1025  0001BC  0A04               	xorlw	4
  1026  0001BE  1050               	iorwf	_rstep+1,w,c
  1027  0001C0  A4D8               	btfss	status,2,c
  1028  0001C2  D00A               	goto	i2l900
  1029                           
  1030                           ;interrupts.c: 139: { LATCbits.LATC5 = 1;
  1031  0001C4  8A8B               	bsf	3979,5,c	;volatile
  1032                           
  1033                           ;interrupts.c: 140: LATCbits.LATC6 = 0;
  1034  0001C6  9C8B               	bcf	3979,6,c	;volatile
  1035                           
  1036                           ;interrupts.c: 141: LATCbits.LATC7 = 0;
  1037  0001C8  9E8B               	bcf	3979,7,c	;volatile
  1038                           
  1039                           ;interrupts.c: 142: LATCbits.LATC4 = 0;
  1040  0001CA  988B               	bcf	3979,4,c	;volatile
  1041                           
  1042                           ;interrupts.c: 143: rstep = 1;
  1043  0001CC  0E00               	movlw	0
  1044  0001CE  6E50               	movwf	_rstep+1,c
  1045  0001D0  0E01               	movlw	1
  1046  0001D2  6E4F               	movwf	_rstep,c
  1047                           
  1048                           ;interrupts.c: 144: rstepcount++;
  1049  0001D4  4A1F               	infsnz	_rstepcount,f,c
  1050  0001D6  2A20               	incf	_rstepcount+1,f,c
  1051  0001D8                     i2l900:
  1052                           
  1053                           ;interrupts.c: 145: }
  1054                           ;interrupts.c: 147: PIR1bits.TMR1IF = 0;
  1055  0001D8  909E               	bcf	3998,0,c	;volatile
  1056                           
  1057                           ;interrupts.c: 148: T1CONbits.TMR1ON = 1;
  1058  0001DA  80CD               	bsf	4045,0,c	;volatile
  1059                           
  1060                           ;interrupts.c: 150: TMR1H = rmotorstephigh;
  1061  0001DC  C055  FFCF         	movff	_rmotorstephigh,4047	;volatile
  1062                           
  1063                           ;interrupts.c: 151: TMR1L = rmotorsteplow;
  1064  0001E0  C056  FFCE         	movff	_rmotorsteplow,4046	;volatile
  1065  0001E4                     i2l908:
  1066                           
  1067                           ;interrupts.c: 152: }
  1068                           ;interrupts.c: 155: if (PIR2bits.TMR3IF && lturn && lturncount < uturn)
  1069  0001E4  A2A1               	btfss	4001,1,c	;volatile
  1070  0001E6  D04D               	goto	i2l97
  1071  0001E8  5010               	movf	_lturn+1,w,c
  1072  0001EA  100F               	iorwf	_lturn,w,c
  1073  0001EC  B4D8               	btfsc	status,2,c
  1074  0001EE  D049               	goto	i2l97
  1075  0001F0  5023               	movf	_uturn,w,c
  1076  0001F2  5C11               	subwf	_lturncount,w,c
  1077  0001F4  5024               	movf	_uturn+1,w,c
  1078  0001F6  5812               	subwfb	_lturncount+1,w,c
  1079  0001F8  B0D8               	btfsc	status,0,c
  1080  0001FA  D043               	goto	i2l97
  1081                           
  1082                           ;interrupts.c: 156: {
  1083                           ;interrupts.c: 157: if (leftturnstep == 1)
  1084  0001FC  044B               	decf	_leftturnstep,w,c
  1085  0001FE  104C               	iorwf	_leftturnstep+1,w,c
  1086  000200  A4D8               	btfss	status,2,c
  1087  000202  D008               	goto	i2l920
  1088                           
  1089                           ;interrupts.c: 158: { LATCbits.LATC0 = 1;
  1090  000204  808B               	bsf	3979,0,c	;volatile
  1091                           
  1092                           ;interrupts.c: 159: LATCbits.LATC1 = 0;
  1093  000206  928B               	bcf	3979,1,c	;volatile
  1094                           
  1095                           ;interrupts.c: 160: LATCbits.LATC2 = 0;
  1096  000208  948B               	bcf	3979,2,c	;volatile
  1097                           
  1098                           ;interrupts.c: 161: LATCbits.LATC3 = 0;
  1099  00020A  968B               	bcf	3979,3,c	;volatile
  1100                           
  1101                           ;interrupts.c: 162: LATCbits.LATC4 = 1;
  1102  00020C  888B               	bsf	3979,4,c	;volatile
  1103                           
  1104                           ;interrupts.c: 163: LATCbits.LATC5 = 0;
  1105  00020E  9A8B               	bcf	3979,5,c	;volatile
  1106                           
  1107                           ;interrupts.c: 164: LATCbits.LATC6 = 0;
  1108  000210  9C8B               	bcf	3979,6,c	;volatile
  1109  000212  D01A               	goto	L7
  1110  000214                     i2l920:
  1111                           
  1112                           ;interrupts.c: 168: else if (leftturnstep == 2)
  1113  000214  504B               	movf	_leftturnstep,w,c
  1114  000216  0A02               	xorlw	2
  1115  000218  104C               	iorwf	_leftturnstep+1,w,c
  1116  00021A  A4D8               	btfss	status,2,c
  1117  00021C  D009               	goto	i2l926
  1118                           
  1119                           ;interrupts.c: 169: { LATCbits.LATC0 = 0;
  1120  00021E  908B               	bcf	3979,0,c	;volatile
  1121                           
  1122                           ;interrupts.c: 170: LATCbits.LATC1 = 0;
  1123  000220  928B               	bcf	3979,1,c	;volatile
  1124                           
  1125                           ;interrupts.c: 171: LATCbits.LATC2 = 0;
  1126  000222  948B               	bcf	3979,2,c	;volatile
  1127                           
  1128                           ;interrupts.c: 172: LATCbits.LATC3 = 1;
  1129  000224  868B               	bsf	3979,3,c	;volatile
  1130                           
  1131                           ;interrupts.c: 173: LATCbits.LATC4 = 0;
  1132  000226  988B               	bcf	3979,4,c	;volatile
  1133                           
  1134                           ;interrupts.c: 174: LATCbits.LATC5 = 0;
  1135  000228  9A8B               	bcf	3979,5,c	;volatile
  1136                           
  1137                           ;interrupts.c: 175: LATCbits.LATC6 = 0;
  1138  00022A  9C8B               	bcf	3979,6,c	;volatile
  1139                           
  1140                           ;interrupts.c: 176: LATCbits.LATC7 = 1;
  1141  00022C  8E8B               	bsf	3979,7,c	;volatile
  1142  00022E  D00D               	goto	L6
  1143  000230                     i2l926:
  1144                           
  1145                           ;interrupts.c: 179: else if (leftturnstep == 3)
  1146  000230  504B               	movf	_leftturnstep,w,c
  1147  000232  0A03               	xorlw	3
  1148  000234  104C               	iorwf	_leftturnstep+1,w,c
  1149  000236  A4D8               	btfss	status,2,c
  1150  000238  D00B               	goto	i2l932
  1151                           
  1152                           ;interrupts.c: 180: { LATCbits.LATC0 = 0;
  1153  00023A  908B               	bcf	3979,0,c	;volatile
  1154                           
  1155                           ;interrupts.c: 181: LATCbits.LATC1 = 0;
  1156  00023C  928B               	bcf	3979,1,c	;volatile
  1157                           
  1158                           ;interrupts.c: 182: LATCbits.LATC2 = 1;
  1159  00023E  848B               	bsf	3979,2,c	;volatile
  1160                           
  1161                           ;interrupts.c: 183: LATCbits.LATC3 = 0;
  1162  000240  968B               	bcf	3979,3,c	;volatile
  1163                           
  1164                           ;interrupts.c: 184: LATCbits.LATC4 = 0;
  1165  000242  988B               	bcf	3979,4,c	;volatile
  1166                           
  1167                           ;interrupts.c: 185: LATCbits.LATC5 = 0;
  1168  000244  9A8B               	bcf	3979,5,c	;volatile
  1169                           
  1170                           ;interrupts.c: 186: LATCbits.LATC6 = 1;
  1171  000246  8C8B               	bsf	3979,6,c	;volatile
  1172  000248                     L7:
  1173                           
  1174                           ;interrupts.c: 187: LATCbits.LATC7 = 0;
  1175  000248  9E8B               	bcf	3979,7,c	;volatile
  1176  00024A                     L6:
  1177                           
  1178                           ;interrupts.c: 188: leftturnstep++;
  1179  00024A  4A4B               	infsnz	_leftturnstep,f,c
  1180  00024C  2A4C               	incf	_leftturnstep+1,f,c
  1181                           
  1182                           ;interrupts.c: 189: }
  1183  00024E  D013               	goto	i2l940
  1184  000250                     i2l932:
  1185                           
  1186                           ;interrupts.c: 190: else if (leftturnstep == 4)
  1187  000250  504B               	movf	_leftturnstep,w,c
  1188  000252  0A04               	xorlw	4
  1189  000254  104C               	iorwf	_leftturnstep+1,w,c
  1190  000256  A4D8               	btfss	status,2,c
  1191  000258  D00E               	goto	i2l940
  1192                           
  1193                           ;interrupts.c: 191: { LATCbits.LATC0 = 0;
  1194  00025A  908B               	bcf	3979,0,c	;volatile
  1195                           
  1196                           ;interrupts.c: 192: LATCbits.LATC1 = 1;
  1197  00025C  828B               	bsf	3979,1,c	;volatile
  1198                           
  1199                           ;interrupts.c: 193: LATCbits.LATC2 = 0;
  1200  00025E  948B               	bcf	3979,2,c	;volatile
  1201                           
  1202                           ;interrupts.c: 194: LATCbits.LATC3 = 0;
  1203  000260  968B               	bcf	3979,3,c	;volatile
  1204                           
  1205                           ;interrupts.c: 195: LATCbits.LATC4 = 0;
  1206  000262  988B               	bcf	3979,4,c	;volatile
  1207                           
  1208                           ;interrupts.c: 196: LATCbits.LATC5 = 1;
  1209  000264  8A8B               	bsf	3979,5,c	;volatile
  1210                           
  1211                           ;interrupts.c: 197: LATCbits.LATC6 = 0;
  1212  000266  9C8B               	bcf	3979,6,c	;volatile
  1213                           
  1214                           ;interrupts.c: 198: LATCbits.LATC7 = 0;
  1215  000268  9E8B               	bcf	3979,7,c	;volatile
  1216                           
  1217                           ;interrupts.c: 199: leftturnstep = 1;
  1218  00026A  0E00               	movlw	0
  1219  00026C  6E4C               	movwf	_leftturnstep+1,c
  1220  00026E  0E01               	movlw	1
  1221  000270  6E4B               	movwf	_leftturnstep,c
  1222                           
  1223                           ;interrupts.c: 200: lturncount++;
  1224  000272  4A11               	infsnz	_lturncount,f,c
  1225  000274  2A12               	incf	_lturncount+1,f,c
  1226  000276                     i2l940:
  1227                           
  1228                           ;interrupts.c: 201: }
  1229                           ;interrupts.c: 202: PIR2bits.TMR3IF = 0;
  1230  000276  92A1               	bcf	4001,1,c	;volatile
  1231                           
  1232                           ;interrupts.c: 203: T3CONbits.TMR3ON = 1;
  1233  000278  80B1               	bsf	4017,0,c	;volatile
  1234                           
  1235                           ;interrupts.c: 204: TMR3H = rmotorstephigh;
  1236  00027A  C055  FFB3         	movff	_rmotorstephigh,4019	;volatile
  1237                           
  1238                           ;interrupts.c: 205: TMR3L = rmotorsteplow;
  1239  00027E  C056  FFB2         	movff	_rmotorsteplow,4018	;volatile
  1240  000282                     i2l97:
  1241  000282  C043  FFF5         	movff	??_high_isr+13,tablat
  1242  000286  C042  FFF8         	movff	??_high_isr+12,tblptru
  1243  00028A  C041  FFF7         	movff	??_high_isr+11,tblptrh
  1244  00028E  C040  FFF6         	movff	??_high_isr+10,tblptrl
  1245  000292  C03F  FFF4         	movff	??_high_isr+9,prodh
  1246  000296  C03E  FFF3         	movff	??_high_isr+8,prodl
  1247  00029A  C03D  FFDA         	movff	??_high_isr+7,fsr2h
  1248  00029E  C03C  FFD9         	movff	??_high_isr+6,fsr2l
  1249  0002A2  C03B  FFE2         	movff	??_high_isr+5,fsr1h
  1250  0002A6  C03A  FFE1         	movff	??_high_isr+4,fsr1l
  1251  0002AA  C039  FFEA         	movff	??_high_isr+3,fsr0h
  1252  0002AE  C038  FFE9         	movff	??_high_isr+2,fsr0l
  1253  0002B2  C037  FFFB         	movff	??_high_isr+1,pclatu
  1254  0002B6  C036  FFFA         	movff	??_high_isr,pclath
  1255  0002BA  0011               	retfie		f
  1256  0002BC                     __end_of_high_isr:
  1257                           	opt stack 0
  1258  0000                     pclatu	equ	0xFFB
  1259                           pclath	equ	0xFFA
  1260                           tblptru	equ	0xFF8
  1261                           tblptrh	equ	0xFF7
  1262                           tblptrl	equ	0xFF6
  1263                           tablat	equ	0xFF5
  1264                           prodh	equ	0xFF4
  1265                           prodl	equ	0xFF3
  1266                           intcon	equ	0xFF2
  1267                           postinc0	equ	0xFEE
  1268                           fsr0h	equ	0xFEA
  1269                           fsr0l	equ	0xFE9
  1270                           wreg	equ	0xFE8
  1271                           fsr1h	equ	0xFE2
  1272                           fsr1l	equ	0xFE1
  1273                           bsr	equ	0xFE0
  1274                           fsr2h	equ	0xFDA
  1275                           fsr2l	equ	0xFD9
  1276                           status	equ	0xFD8
  1277                           pclatu	equ	0xFFB
  1278                           pclath	equ	0xFFA
  1279                           tblptru	equ	0xFF8
  1280                           tblptrh	equ	0xFF7
  1281                           tblptrl	equ	0xFF6
  1282                           tablat	equ	0xFF5
  1283                           prodh	equ	0xFF4
  1284                           prodl	equ	0xFF3
  1285                           intcon	equ	0xFF2
  1286                           postinc0	equ	0xFEE
  1287                           fsr0h	equ	0xFEA
  1288                           fsr0l	equ	0xFE9
  1289                           wreg	equ	0xFE8
  1290                           fsr1h	equ	0xFE2
  1291                           fsr1l	equ	0xFE1
  1292                           bsr	equ	0xFE0
  1293                           fsr2h	equ	0xFDA
  1294                           fsr2l	equ	0xFD9
  1295                           status	equ	0xFD8
  1296                           
  1297                           	psect	rparam
  1298  0000                     pclatu	equ	0xFFB
  1299                           pclath	equ	0xFFA
  1300                           tblptru	equ	0xFF8
  1301                           tblptrh	equ	0xFF7
  1302                           tblptrl	equ	0xFF6
  1303                           tablat	equ	0xFF5
  1304                           prodh	equ	0xFF4
  1305                           prodl	equ	0xFF3
  1306                           intcon	equ	0xFF2
  1307                           postinc0	equ	0xFEE
  1308                           fsr0h	equ	0xFEA
  1309                           fsr0l	equ	0xFE9
  1310                           wreg	equ	0xFE8
  1311                           fsr1h	equ	0xFE2
  1312                           fsr1l	equ	0xFE1
  1313                           bsr	equ	0xFE0
  1314                           fsr2h	equ	0xFDA
  1315                           fsr2l	equ	0xFD9
  1316                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         36
    Persistent  14
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     36      86
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          239      0       0
    BANK15          128      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _scan_sensors->_adc_convert

Critical Paths under _high_isr in COMRAM

    None.

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _low_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Critical Paths under _low_isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _high_isr in BANK8

    None.

Critical Paths under _low_isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _high_isr in BANK9

    None.

Critical Paths under _low_isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _high_isr in BANK10

    None.

Critical Paths under _low_isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _high_isr in BANK11

    None.

Critical Paths under _low_isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _high_isr in BANK12

    None.

Critical Paths under _low_isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _high_isr in BANK13

    None.

Critical Paths under _low_isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _high_isr in BANK14

    None.

Critical Paths under _low_isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _high_isr in BANK15

    None.

Critical Paths under _low_isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0      15
                _ConfigureOscillator
                       _scan_sensors
 ---------------------------------------------------------------------------------
 (1) _scan_sensors                                         0     0      0      15
                        _adc_convert
 ---------------------------------------------------------------------------------
 (2) _adc_convert                                          5     3      2      15
                                             31 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _low_isr                                             17    17      0       0
                                              0 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _high_isr                                            14    14      0       0
                                             17 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _scan_sensors
     _adc_convert

 _low_isr (ROOT)

 _high_isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EEE      0       0      38        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK14           EF      0       0      33        0.0%
BANK14              EF      0       0      34        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BIGRAM_1            80      0       0      37        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     24      56       1       67.7%
BITSFR_5             0      0       0      40        0.0%
SFR_5                0      0       0      40        0.0%
BITSFR_4             0      0       0      40        0.0%
SFR_4                0      0       0      40        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      56       6        0.0%
DATA                 0      0      56       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Thu Apr 23 03:40:58 2015

                          bsr 000FE0                   __CFG_BORV$3 000000                  __CFG_CP0$OFF 000000  
                __CFG_CP1$OFF 000000                  __CFG_CP2$OFF 000000                  __CFG_CP3$OFF 000000  
                 __CFG_LVP$ON 000000                           l201 03AA                           l213 03C6  
                         l216 03D8                           l219 03EA          __size_of_adc_convert 003A  
                __CFG_CPB$OFF 000000                  __CFG_CPD$OFF 000000                           _adc 0001  
                         wreg 000FE8                  __CFG_WDT$OFF 000000                          l1052 0386  
                        _LATC 000F8B                          i2l97 0282                          _main 02BC  
                        _left 0009                          fsr0h 000FEA                          fsr1h 000FE2  
                        fsr0l 000FE9                          fsr2h 000FDA                          fsr1l 000FE1  
                        fsr2l 000FD9                          pclat 000FFA                          prodh 000FF4  
                        prodl 000FF3                          start 00A2                 __CFG_IESO$OFF 000000  
               _rmotorsteplow 0056                         ?_main 0025                         i2l900 01D8  
                       i2l920 0214                         i2l840 0106                         i2l932 0250  
                       i2l940 0276                         i2l908 01E4                         i2l852 0132  
                       i2l860 0150                         i2l926 0230                         i2l846 011A  
                       i2l880 018E                         i2l892 01BA                         i2l868 015C  
                       i2l886 01A2                         _TMR1H 000FCF                         _TMR3H 000FB3  
                       _TMR1L 000FCE                         _TMR3L 000FB2                         _TRISA 000F92  
                       _TRISB 000F93                         _TRISC 000F94                         _TRISD 000F95  
         _ConfigureOscillator 0410                 __CFG_PWRT$OFF 000000                 __CFG_WRT0$OFF 000000  
               __CFG_WRT1$OFF 000000                 __CFG_WRT2$OFF 000000                 __CFG_WRT3$OFF 000000  
              __CFG_EBTR0$OFF 000000                __CFG_FCMEN$OFF 000000                __CFG_EBTR1$OFF 000000  
              __CFG_EBTR2$OFF 000000                __CFG_EBTR3$OFF 000000                 __CFG_WRTB$OFF 000000  
               __CFG_WRTC$OFF 000000                 __CFG_WRTD$OFF 000000                __CFG_EBTRB$OFF 000000  
                       _right 0017                         _lstep 004D                         _lturn 000F  
                       _rstep 004F                         _ustep 0051                         _uturn 0023  
             __end_of_low_isr 00A2                         tablat 000FF5                         status 000FD8  
        ?_ConfigureOscillator 0025                __CFG_MCLRE$OFF 000000               __initialization 03FE  
                __end_of_main 038C                        ??_main 0049                 __activetblptr 000000  
              _rmotorstephigh 0055                        _ADRESH 000FC4                        _ADRESL 000FC3  
                      _OSCCON 000FD3         ??_ConfigureOscillator 0044                __CFG_XINST$OFF 000000  
            __end_of_high_isr 02BC                __CFG_STVREN$ON 000000                        clear_0 0404  
                   ??_low_isr 0025                        tblptrh 000FF7                        tblptrl 000FF6  
                      tblptru 000FF8                    __accesstop 0080       __end_of__initialization 040A  
             __CFG_PBADEN$OFF 000000                 ?_scan_sensors 0025                __pcstackCOMRAM 0025  
              ??_scan_sensors 0049                    __pnvCOMRAM 0049                 ??_adc_convert 0046  
              _lmotorstephigh 0053                       _OSCTUNE 000F9B                     ?_high_isr 0025  
                     __Hparam 0000                       __Lparam 0000                       __pcinit 03FE  
                     __ramtop 1000                       __ptext0 02BC                       __ptext1 03C6  
                     __ptext2 038C                       __ptext3 0410                     _T1CONbits 000FCD  
                     _leftadc 000B                       _forward 0049                     _T3CONbits 000FB1  
         __end_of_adc_convert 03C6                       _low_isr 0018                    ??_high_isr 0036  
              __pintcode_body 00A6          end_of_initialization 040A                       int_func 00A6  
                     postinc0 000FEE                    _lstepcount 000D          __end_of_scan_sensors 03FE  
                  _lturncount 0011   __end_of_ConfigureOscillator 0412                    _step_count 0021  
                  _rstepcount 001F            adc_convert@channel 0048                   _adc_convert 038C  
         start_initialization 03FE              __CFG_OSC$INTIO67 000000              __CFG_LPT1OSC$OFF 000000  
                 __pbssCOMRAM 0001                  _leftturnstep 004B             __size_of_high_isr 02B4  
           __CFG_CCP2MX$PORTC 000000                     __pintcode 0008         __size_of_scan_sensors 0038  
               _lmotorsteplow 0054                   __pintcodelo 0018                _has_front_wall 0003  
                    ?_low_isr 0025                     _middleadc 0013                      _LATCbits 000F8B  
                _scan_sensors 03C6                      _PIE1bits 000F9D                      _PIE2bits 000FA0  
                    _PIR1bits 000F9E                      _PIR2bits 000FA1                     _rightstep 001B  
              _has_right_wall 0007                      _RCONbits 000FD0              __CFG_WDTPS$32768 000000  
               _rightturnstep 001D                    _ADCON0bits 000FC2                    _ADCON1bits 000FC1  
                  _ADCON2bits 000FC0                      __Hrparam 0000                      __Lrparam 0000  
          __CFG_BOREN$SBORDIS 000000                  ?_adc_convert 0044                 _has_left_wall 0005  
            __size_of_low_isr 008A                      _high_isr 0008                 __size_of_main 00D0  
__size_of_ConfigureOscillator 0002                      _rightadc 0019                      _prev_adc 0015  
                  _INTCONbits 000FF2                      intlevel1 0000                      intlevel2 0000  
